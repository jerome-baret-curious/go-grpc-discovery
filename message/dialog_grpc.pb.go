// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: message/dialog.proto

package animal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnimalDialogClient is the client API for AnimalDialog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnimalDialogClient interface {
	UniAnimal(ctx context.Context, in *AnimalRequest, opts ...grpc.CallOption) (*AnimalResponse, error)
	ServStreamAnimal(ctx context.Context, in *AnimalRequest, opts ...grpc.CallOption) (AnimalDialog_ServStreamAnimalClient, error)
	CliStreamAnimal(ctx context.Context, opts ...grpc.CallOption) (AnimalDialog_CliStreamAnimalClient, error)
	BiAnimal(ctx context.Context, opts ...grpc.CallOption) (AnimalDialog_BiAnimalClient, error)
}

type animalDialogClient struct {
	cc grpc.ClientConnInterface
}

func NewAnimalDialogClient(cc grpc.ClientConnInterface) AnimalDialogClient {
	return &animalDialogClient{cc}
}

func (c *animalDialogClient) UniAnimal(ctx context.Context, in *AnimalRequest, opts ...grpc.CallOption) (*AnimalResponse, error) {
	out := new(AnimalResponse)
	err := c.cc.Invoke(ctx, "/animal.AnimalDialog/UniAnimal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animalDialogClient) ServStreamAnimal(ctx context.Context, in *AnimalRequest, opts ...grpc.CallOption) (AnimalDialog_ServStreamAnimalClient, error) {
	stream, err := c.cc.NewStream(ctx, &AnimalDialog_ServiceDesc.Streams[0], "/animal.AnimalDialog/ServStreamAnimal", opts...)
	if err != nil {
		return nil, err
	}
	x := &animalDialogServStreamAnimalClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnimalDialog_ServStreamAnimalClient interface {
	Recv() (*AnimalResponse, error)
	grpc.ClientStream
}

type animalDialogServStreamAnimalClient struct {
	grpc.ClientStream
}

func (x *animalDialogServStreamAnimalClient) Recv() (*AnimalResponse, error) {
	m := new(AnimalResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *animalDialogClient) CliStreamAnimal(ctx context.Context, opts ...grpc.CallOption) (AnimalDialog_CliStreamAnimalClient, error) {
	stream, err := c.cc.NewStream(ctx, &AnimalDialog_ServiceDesc.Streams[1], "/animal.AnimalDialog/CliStreamAnimal", opts...)
	if err != nil {
		return nil, err
	}
	x := &animalDialogCliStreamAnimalClient{stream}
	return x, nil
}

type AnimalDialog_CliStreamAnimalClient interface {
	Send(*AnimalRequest) error
	CloseAndRecv() (*AnimalResponse, error)
	grpc.ClientStream
}

type animalDialogCliStreamAnimalClient struct {
	grpc.ClientStream
}

func (x *animalDialogCliStreamAnimalClient) Send(m *AnimalRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *animalDialogCliStreamAnimalClient) CloseAndRecv() (*AnimalResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AnimalResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *animalDialogClient) BiAnimal(ctx context.Context, opts ...grpc.CallOption) (AnimalDialog_BiAnimalClient, error) {
	stream, err := c.cc.NewStream(ctx, &AnimalDialog_ServiceDesc.Streams[2], "/animal.AnimalDialog/BiAnimal", opts...)
	if err != nil {
		return nil, err
	}
	x := &animalDialogBiAnimalClient{stream}
	return x, nil
}

type AnimalDialog_BiAnimalClient interface {
	Send(*AnimalRequest) error
	Recv() (*AnimalResponse, error)
	grpc.ClientStream
}

type animalDialogBiAnimalClient struct {
	grpc.ClientStream
}

func (x *animalDialogBiAnimalClient) Send(m *AnimalRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *animalDialogBiAnimalClient) Recv() (*AnimalResponse, error) {
	m := new(AnimalResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnimalDialogServer is the server API for AnimalDialog service.
// All implementations must embed UnimplementedAnimalDialogServer
// for forward compatibility
type AnimalDialogServer interface {
	UniAnimal(context.Context, *AnimalRequest) (*AnimalResponse, error)
	ServStreamAnimal(*AnimalRequest, AnimalDialog_ServStreamAnimalServer) error
	CliStreamAnimal(AnimalDialog_CliStreamAnimalServer) error
	BiAnimal(AnimalDialog_BiAnimalServer) error
	mustEmbedUnimplementedAnimalDialogServer()
}

// UnimplementedAnimalDialogServer must be embedded to have forward compatible implementations.
type UnimplementedAnimalDialogServer struct {
}

func (UnimplementedAnimalDialogServer) UniAnimal(context.Context, *AnimalRequest) (*AnimalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UniAnimal not implemented")
}
func (UnimplementedAnimalDialogServer) ServStreamAnimal(*AnimalRequest, AnimalDialog_ServStreamAnimalServer) error {
	return status.Errorf(codes.Unimplemented, "method ServStreamAnimal not implemented")
}
func (UnimplementedAnimalDialogServer) CliStreamAnimal(AnimalDialog_CliStreamAnimalServer) error {
	return status.Errorf(codes.Unimplemented, "method CliStreamAnimal not implemented")
}
func (UnimplementedAnimalDialogServer) BiAnimal(AnimalDialog_BiAnimalServer) error {
	return status.Errorf(codes.Unimplemented, "method BiAnimal not implemented")
}
func (UnimplementedAnimalDialogServer) mustEmbedUnimplementedAnimalDialogServer() {}

// UnsafeAnimalDialogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnimalDialogServer will
// result in compilation errors.
type UnsafeAnimalDialogServer interface {
	mustEmbedUnimplementedAnimalDialogServer()
}

func RegisterAnimalDialogServer(s grpc.ServiceRegistrar, srv AnimalDialogServer) {
	s.RegisterService(&AnimalDialog_ServiceDesc, srv)
}

func _AnimalDialog_UniAnimal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnimalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimalDialogServer).UniAnimal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/animal.AnimalDialog/UniAnimal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimalDialogServer).UniAnimal(ctx, req.(*AnimalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimalDialog_ServStreamAnimal_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AnimalRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnimalDialogServer).ServStreamAnimal(m, &animalDialogServStreamAnimalServer{stream})
}

type AnimalDialog_ServStreamAnimalServer interface {
	Send(*AnimalResponse) error
	grpc.ServerStream
}

type animalDialogServStreamAnimalServer struct {
	grpc.ServerStream
}

func (x *animalDialogServStreamAnimalServer) Send(m *AnimalResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AnimalDialog_CliStreamAnimal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnimalDialogServer).CliStreamAnimal(&animalDialogCliStreamAnimalServer{stream})
}

type AnimalDialog_CliStreamAnimalServer interface {
	SendAndClose(*AnimalResponse) error
	Recv() (*AnimalRequest, error)
	grpc.ServerStream
}

type animalDialogCliStreamAnimalServer struct {
	grpc.ServerStream
}

func (x *animalDialogCliStreamAnimalServer) SendAndClose(m *AnimalResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *animalDialogCliStreamAnimalServer) Recv() (*AnimalRequest, error) {
	m := new(AnimalRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AnimalDialog_BiAnimal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnimalDialogServer).BiAnimal(&animalDialogBiAnimalServer{stream})
}

type AnimalDialog_BiAnimalServer interface {
	Send(*AnimalResponse) error
	Recv() (*AnimalRequest, error)
	grpc.ServerStream
}

type animalDialogBiAnimalServer struct {
	grpc.ServerStream
}

func (x *animalDialogBiAnimalServer) Send(m *AnimalResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *animalDialogBiAnimalServer) Recv() (*AnimalRequest, error) {
	m := new(AnimalRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnimalDialog_ServiceDesc is the grpc.ServiceDesc for AnimalDialog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnimalDialog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "animal.AnimalDialog",
	HandlerType: (*AnimalDialogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UniAnimal",
			Handler:    _AnimalDialog_UniAnimal_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServStreamAnimal",
			Handler:       _AnimalDialog_ServStreamAnimal_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CliStreamAnimal",
			Handler:       _AnimalDialog_CliStreamAnimal_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BiAnimal",
			Handler:       _AnimalDialog_BiAnimal_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message/dialog.proto",
}
